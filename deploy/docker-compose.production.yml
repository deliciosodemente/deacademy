# Production Docker Compose for Digital English Academy
# Optimized for scalability, high availability, and performance
# Domain: denglishacademy.com

version: '3.8'

services:
  # Load Balancer / Reverse Proxy
  nginx-lb:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ../logs/nginx:/var/log/nginx
    networks:
      - dea-frontend
      - dea-backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      placement:
        constraints: [node.role == manager]
    labels:
      - "monitoring=true"
      - "service=load-balancer"

  # Application service (scalable)
  app:
    build:
      context: ..
      dockerfile: deploy/docker/Dockerfile.production
      target: api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - TZ=UTC
      - REDIS_URL=redis://redis-cluster:6379
      - MONGODB_URL=mongodb://mongodb-primary:27017/digitalenglishacademy
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    volumes:
      - ../logs/app:/var/log/app
    networks:
      - dea-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis-cluster
      - mongodb-primary
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    labels:
      - "monitoring=true"
      - "service=application"

  # MongoDB Primary (Replica Set)
  mongodb-primary:
    image: mongo:6
    container_name: dea-mongodb-primary
    restart: unless-stopped
    command: mongod --replSet rs0 --bind_ip_all
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=digitalenglishacademy
    volumes:
      - mongodb-primary-data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d:ro
      - ./mongodb/replica-init.js:/docker-entrypoint-initdb.d/replica-init.js:ro
    networks:
      - dea-backend
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
    labels:
      - "monitoring=true"
      - "service=database"
      - "role=primary"

  mongodb-secondary:
    image: mongo:6
    container_name: dea-mongodb-secondary
    restart: unless-stopped
    command: mongod --replSet rs0 --bind_ip_all
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb-secondary-data:/data/db
    networks:
      - dea-backend
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - mongodb-primary
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    labels:
      - "monitoring=true"
      - "service=database"
      - "role=secondary"

  # Redis Cluster for caching and sessions
  redis-cluster:
    image: redis:7-alpine
    container_name: dea-redis-cluster
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-cluster-data:/data
    networks:
      - dea-backend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    labels:
      - "monitoring=true"
      - "service=cache"

  # CDN/Static Assets Server
  cdn:
    image: nginx:alpine
    container_name: dea-cdn
    restart: unless-stopped
    volumes:
      - ../dist:/usr/share/nginx/html:ro
      - ./nginx/cdn.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - dea-frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M
    labels:
      - "monitoring=true"
      - "service=cdn"

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: dea-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.production.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - dea-backend
      - dea-monitoring
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    labels:
      - "monitoring=true"
      - "service=metrics"

  grafana:
    image: grafana/grafana:latest
    container_name: dea-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=grafana.denglishacademy.com
      - GF_SERVER_ROOT_URL=https://grafana.denglishacademy.com
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - dea-monitoring
      - dea-frontend
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    labels:
      - "monitoring=true"
      - "service=dashboard"

  # Log Management
  loki:
    image: grafana/loki:latest
    container_name: dea-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki.production.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - dea-monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    labels:
      - "monitoring=true"
      - "service=logs"

  promtail:
    image: grafana/promtail:latest
    container_name: dea-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail.production.yml:/etc/promtail/config.yml:ro
      - ../logs:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - dea-monitoring
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    labels:
      - "monitoring=true"
      - "service=log-shipper"

  # Auto-scaling and Health Monitoring
  watchtower:
    image: containrrr/watchtower
    container_name: dea-watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - dea-backend
    labels:
      - "monitoring=true"
      - "service=auto-updater"

  # Backup Service
  backup:
    image: alpine:latest
    container_name: dea-backup
    restart: "no"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${BACKUP_S3_BUCKET:-dea-backups}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - mongodb-primary-data:/backup/mongodb:ro
      - mongodb-secondary-data:/backup/mongodb-secondary:ro
      - redis-cluster-data:/backup/redis:ro
      - grafana-data:/backup/grafana:ro
      - ./scripts/backup-production.sh:/backup.sh:ro
    networks:
      - dea-backend
    profiles:
      - backup
    labels:
      - "monitoring=true"
      - "service=backup"

  # SSL Certificate Management
  certbot:
    image: certbot/certbot
    container_name: dea-certbot
    restart: "no"
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./ssl/www:/var/www/certbot
    networks:
      - dea-frontend
    profiles:
      - ssl
    labels:
      - "service=ssl-manager"

networks:
  dea-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
  dea-backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
  dea-monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16

volumes:
  mongodb-primary-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/dea/data/mongodb-primary
  mongodb-secondary-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/dea/data/mongodb-secondary
  redis-cluster-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/dea/data/redis
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/dea/data/prometheus
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/dea/data/grafana
  loki-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/dea/data/loki
